cd github.com
JoseLimonV

GIT

pwd --Shows where you at in command line (Location directory)
git version -- gives you the git version installed

-------Configure your user name and email into git----------
git config --global user.name "Jose Limon"
git config --global user.email "jgpe.lim@gmail.com"

----------get user name and email----------
git config --global --list

----------clone your github repository
git clone https://github.com/JoseLimonV/github-demo.git

----------Get in which branch you are and to see changes-------------
git status

---Master branch is default branch by convention in a git repository

--Create document with text in it----
$ echo "Test Git Quick Start demo" >> start.txt

git status === tells if there are new items
git add -FileName- === Adds item to staging area
git commit -m "adding text file" == Adds file to repository with a message
git push origin master == sends to master branch in github

---------------Agregar notepad++ a git --------------
control panel--Conf Avanzada--Variables de entorno--Variables de sistema--path agregar el path de notepad ++ se seprara con ; 
checar si se agrego correctamente
cmd
escribir dentro notepad++  --Abrira la app

from git, write 
	notepad++ .bashrc
inside notepad++ write and save
	alias npp='notepad++.exe -multiInst -nosession'
From git, to set up npp as your text editor
	git config --global core.editor "notepad++.exe -multiInst -nosession"
to check the default editor
	npp .gitconfig -----it opens npp with user, email and editor info

----------------------------------------------
~ -- How we reference our users Home directory

unzip ~/Downloads/zipped file

git init -- uses current folder as the git's current working directory also adds the .git repository
git add . -- adds all the files and recursively

----- remove project from git ---------
rm -rf .git
rm -rf MyProject

------------------------------------
ls -al also displays hidden files
npp hipster.txt --creates and opens file with the name hipster.txt

-----get latest code version to our local machine-----
git pull origin master

-----git add and commit in one line-------
git commit -am "adding more text"
can only be done with files that are tracked

Tracked file -- Any file that has already been commited into the git repository or has been added to the git index or the staging area

git ls-files ---displays all the tracked files

----------------------------------------------

Create folder and folders inside it at the same time
	mkdir -p level1/2/3/4
-------------------------------------
Backing out changes
	git reset HEAD FileName    *unstage
	git checkout -- FileName   *ROlls back changes
-------------------------------------------------

Delete files in git

rm  ------------deletes files
git rm FileName --- Removes tracked file... you must commit your change

-------undo git rm----------
git reset HEAD fileName
git checkout -- fileName
------------------------------
-----If you use rm, use the below after the rm----
git add -A  adds to staging area any changes, including deletions

Example
rm -rf Directory
git add -A
git commit -m "Deleted Directory and everything inside it"

---------------------------
git help ----- displays git help and usual git commands
git help <Command>   -------displays specific help for a command


git log ---- displays commits history
git log --abbrev-commit  -------shorts commit id displayed
git log --oneline --graph --decorate ------ display entries in one line, graphic and color
git log <StartCommitId>...<EndCommitId> -----displays range of commits
git log --since="3 days -----Brings last 3 days logs
git log -- FileName
git log --follow --FilePath   -----Displays file history

git show <CommitId> ----Displays full commit information

------------Aliases in git----------------
How to create a command alias
	git config --global alias.<alias> "Command"
how to call the alias
	git <alias>

location of the alias
npp ~/.gitconfig

------------Ignore files-------------
add them into .gitignore file
If .gitignore doesn´t exist, create it
After you added the file into .gitignore, you need to add, commit and push the .gitignore file
	Examples
		File.txt
		*.txt
		Directory/

----------------Visual Merge diff tool----------
Get P4Merge tool,
add its path to the env variables
Add P4merge tool to git (Diff)
	git config --global diff.tool p4merge
	git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
	git config --global difftool.prompt false

Check settings
	 git config --global --list

Add P4merge tool to git (Merge)
	git config --global merge.tool p4merge
	git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
	git config --global mergetool.prompt false


-----------------------------------------------------

git diff -- Brings differences in file if no parameters, it diferentiates
		between what is in your working directory and what is staged

git difftool -- brings the tool you added to git with the differences between 
		the files that are in your working area and the ones in 
		staging area

git diff HEAD		-- cOMPARES working directoey with what is in .git folder

git difftool HEAD	""

git diff --staged HEAD  -- Compares staged area with .git repository
git diff --staged HEAD  ""

If there are more thand one file with updates, diff will give you the differences for all files
to get the differences for a single file
	
	git diff -- FileName

-------------------------------------------
git log --oneline brings the commits history

Diff between one commit and the latest commit

git diff <CommitId> HEAD -----> HEAD points the last commit in our history

git difftool <CommitId> HEAD

-------------------------------------------------------
Get diff between 2 commits

git diff <CommitId1> <CommitId2>
git difftool <CommitId1> <CommitId2>

---------------------------------------------
Compare between local and Remote Branches

         local     remote
git diff master origin/master

git difftool master origin/master

------------------------------------------------
Branches
git branch -a  -----lists all branches

* master                            ------CUrrent branch you are using
  remotes/origin/HEAD -> origin/master    ----Github branch
  remotes/origin/master               ------ .git repository

Create new branch
	git branch NewBranch

To switch to NewBranch
	git checkout NewBranch

Rename branch NewBranch to New    -m is move
	git branch -m NewBranch New

Delete a branch 
	git branch -d New         -d is delete

Create and switch to the created branch in one command
	git checkout -b AnotherBranch    

Check differences between branches
	git diff master AnotherBranch
	git difftool master AnotherBranch

Merge branches fast forward
	git merge AnotherBranch
		It can only be done if ther are no commits pending in Master

Merge not fast forward
	git merge copyrightBr --no-ff

-----------------------------------------------
Conflicting merges and how to resolve them

When 2devs create conflicting changes

---------------------------------------------
Rebase command

git rebase master   -----adds the commits from master to the new branch

After merged conflicting problems with rebase, to continue rebase:
	git rebase --continue

----Pull with Rebase-----
to update references between local and remote repository, use fetch command

	git fetch origin master

To get the changes from git hub and keep yours ahead
you use 
	git pull --rebase origin master

-----------------------------------------------
Stash command
For when you have a work in progress but can't be committed yet
and you have to work in something that needs to commit right now

	git stash
		like it saves it in chache, if you do a git status, you won't see the updated file and
		if you open the file you won't see the changes you made

To open the stashed file
	git stash apply
		gives you a status and makes your stashed changes visible again
		
	
	git stash list
		displays a list of the stashed changes you've done
	git stash drop
		drops the last stash you did

git stash only stashes the tracked files


	git stash -u
		stashes untracked files and tracked files at the same time
	
	git stash pop
		unstashes (Makes visible your stashed changes) 
		your change and dorps the stash

	git stash save "msg"
		stashes the file and adds a msg to be easier to diferentiate when multiple stashes
	
	git stash list
		the first stash is the latest stashed file
		the last stash is the first stashed file

	git stash show stash@{1}
		shows you the stash index you selected with file info

	git stash apply stash@{1}
		like the regular apply but unstashes the selected stash

	git stash drop stash@{1}
	

	git stash clear
		empties your stash list (like drop but for all the stashes)

	
	git stash branch NewChanges
		creates branch with stashed content
		moves you to the created branch
		clears the stash list
	

	
	


